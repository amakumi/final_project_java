/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject1;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author OWNER
 */
public class settings extends javax.swing.JFrame
{

    /**
     * Creates new form settings
     */
    public settings()
    {
        setTitle("Settings");
        initComponents();
        groupButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        settings_label = new javax.swing.JLabel();
        metal = new javax.swing.JRadioButton();
        nimbus = new javax.swing.JRadioButton();
        windows = new javax.swing.JRadioButton();
        classic = new javax.swing.JRadioButton();
        header = new javax.swing.JLabel();
        motif = new javax.swing.JRadioButton();
        back_menu = new javax.swing.JButton();
        darcula = new javax.swing.JRadioButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenu3.setText("jMenu3");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        settings_label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        settings_label.setText("SETTINGS");

        metal.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        metal.setText("Metal");
        metal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metalActionPerformed(evt);
            }
        });

        nimbus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        nimbus.setText("Nimbus");
        nimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nimbusActionPerformed(evt);
            }
        });

        windows.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        windows.setText("Windows");
        windows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowsActionPerformed(evt);
            }
        });

        classic.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        classic.setText("Classic");
        classic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classicActionPerformed(evt);
            }
        });

        header.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        header.setText("Set theme:");

        motif.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        motif.setText("Motif");
        motif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motifActionPerformed(evt);
            }
        });

        back_menu.setText("BACK ");
        back_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_menuActionPerformed(evt);
            }
        });

        darcula.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        darcula.setText("Darcula");
        darcula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darculaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 292, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(classic, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(motif, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(darcula, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metal, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nimbus, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(windows, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(333, 333, 333))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(settings_label))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(back_menu))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(settings_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(header)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nimbus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windows)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(darcula)
                .addGap(74, 74, 74)
                .addComponent(back_menu)
                .addGap(32, 32, 32))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //group all buttons so the player could only choose a specific option/selection
    private void groupButton()
    {
        ButtonGroup bg1 = new ButtonGroup();

        bg1.add(metal);
        bg1.add(nimbus);
        bg1.add(windows);
        bg1.add(classic);
        bg1.add(motif);
        bg1.add(darcula);
    }
    
    
    private void metalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metalActionPerformed
        // if the player chooses METAL
        String choice = "Metal";
        try
        {
            if (choice.equals("Metal"))
            {
                //sets the specific theme to be displayed by loading through the theme directory
                javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            }   
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_metalActionPerformed

    private void nimbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nimbusActionPerformed
        // if the player chooses NIMBUS
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    //sets the specific theme to be displayed by getting the class name
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_nimbusActionPerformed

    private void windowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowsActionPerformed
        // if the player chooses WINDOWS
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    //sets the specific theme to be displayed by getting the class name
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_windowsActionPerformed

    private void classicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classicActionPerformed
        // if the player chooses WINDOWS CLASSIC
        String choice = "Classic";
        try
        {
            if (choice.equals("Classic"))
            {
                //sets the specific theme to be displayed by loading through the theme directory
                javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
                //break;
            }
            
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_classicActionPerformed

    private void motifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motifActionPerformed
        // if the player chooses MODIF
        String choice = "Motif";
        try
        {
            if (choice.equals("Motif"))
            {
                javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            }      
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_motifActionPerformed

    // performs the action if the BACK BUTTON is clicked or selected
    private void back_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_menuActionPerformed
        // TODO add your handling code here:
        mainmenu q = new mainmenu();
        q.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_back_menuActionPerformed

    private void darculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darculaActionPerformed
        // if the player chooses DARCULA
        //String choice = "Darcula";
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Darcula".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        // apply exception handlings when a specific theme fail to load or to display
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Are you sure?", ":: Confirmation ::", JOptionPane.INFORMATION_MESSAGE);
        new settings().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_darculaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new settings().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_menu;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton classic;
    private javax.swing.JRadioButton darcula;
    private javax.swing.JLabel header;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButton metal;
    private javax.swing.JRadioButton motif;
    private javax.swing.JRadioButton nimbus;
    private javax.swing.JLabel settings_label;
    private javax.swing.JRadioButton windows;
    // End of variables declaration//GEN-END:variables
}
